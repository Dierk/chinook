=== Overview

Chinook is a tiny web framework aimed to create microservices. A basic
`Chinook` application needs only three steps to expose an endpoint:

* `Handler`
* `Endpoint registration`
* `Main method`

A whole `Chinook` application could as simple as:

[source, haskell]
----
import chinook.Chinook

main _ = do
   get "/hello" $ \req -> do
      return response.{ output = Just "Hello World" }
----


==== Handler

Handlers are the most important part of Chinook, is where client
requests are handled. Chinook http handlers normally have the
following signature:

[source, haskell]
----
IO Request -> IO Reponse
----

As you may see there's no difference between handlers used with
different http verbs:

[source, haskell]
.GET
----
include::{sampleSrc}/chinook/Handlers.fr[tags=helloWorldHandler]
----

[source, haskell]
.DELETE
----
include::{sampleSrc}/chinook/Handlers.fr[tags=deleteHandler]
----

What makes them different ? The endpoint registration.

==== Endpoint registration

The way `Chinook` works at the moment is a main entry point where
handlers are registered for a specific `http verb` and a `path`.

It always follows the same pattern:

[source, haskell]
----
http-verb "/registered-path" handler
----

If you take a look at the `chinook-sample` application, the main entry
point is located in the `App.fr` file.

[source, haskell]
----
include::{sampleSrc}/chinook/App.fr[tags=routes]
----

Here you can see all available endpoints in your application. For a
given URL there is the related handler function. How you manage your
handler files is completely up to you.

All `HTTP` registration functions have the same structure, here is the
function to register a HTTP `GET` handler:

[source, haskell]
----
include::{coreSrc}/chinook/Chinook.fr[tags=getFunction]
----

It basically needs:

- A `String` representing the URI resource A handler function to
- A `Handler` to deal with the `request` and `response` originated in
this invocation.

A `handler` basically receives a `IO Request` and should return a `IO
Response`. Both are available undere `chinook.Chinook`:

[source, haskell]
----
include::{sampleSrc}/chinook/Handlers.fr[tags=basic-imports]
----

Here's a simple example:

[source, haskell]
----
include::{sampleSrc}/chinook/Handlers.fr[tags=helloWorldHandler]
----

NOTE: `Chinook.response` is a way of creating a new
`chinook.Chinook.Response` without having to specify all possible
fields in `Response`. It creates a new copy from the default
`Response` value, but it lets you set different field values. This is
not a `Chinook` thing but `Frege's` and it's call `value update`.

If you want a `GET` handler to return an output you should be setting
the response's `output` field.

Then the only thing remaining is to register the handler to receive
a get call in a given URI:

[source, haskell]
----
include::{sampleSrc}/chinook/App.fr[tags=routes]
----


==== Main

To start a `Chinook` application you only have to invoke the main
function containing all the endpoint registrations as we saw in the
previous chapter.

This is independent of the tool used to call that method. For instance,
using gradle you can use the `application` plugin.

[source, groovy]
----
include::{sampleBase}/build.gradle[]
----

<1> Gradle Application plugin 
<2> Namespace where the `main` function is located
