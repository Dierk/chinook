module chinook.Handlers where

import Data.JSON

import chinook.Data (Lang)
import chinook.Spark (Request,Response)

-- tag::helloWorldHandler[]
helloWorldHandler :: MutableIO Request -> MutableIO Response -> IO (Maybe String)
helloWorldHandler = \req \res -> do
  return $ Just "Hello World from Chinook :-)"
-- end::helloWorldHandler[]

goodbyeHandler :: MutableIO Request -> MutableIO Response -> IO (Maybe String)
goodbyeHandler = \req \res -> do
  return $ Just "Bye bye"

-- tag::greetingsHandler[]
greetingsHandler :: MutableIO Request -> MutableIO Response -> IO (Maybe String)
greetingsHandler = \req \res -> do
  name      <- req.paths ":name"
  age       <- req.paths ":age"
  _         <- res.status 200 -- <1> response status code
  return $ createGreetings name age
-- end::greetingsHandler[]

createGreetings :: Maybe String -> Maybe String -> Maybe String
createGreetings name age = fmap (concat) $ sequence [greeting, name, question, age, mark]
    where greeting = Just "Hello "
          question = Just ". Are you "
          mark     = Just "?"

-- tag::getJSON[]
getJSON :: MutableIO Request -> MutableIO Response -> IO (Maybe String)
getJSON = \req \res -> do
  code  <- req.queryParams "code"
  desc  <- req.queryParams "desc"
  _     <- res.contentType "application/json" -- <1> response content type
  return $ getLangAsJSON code desc
-- end::getJSON[]

getLangAsJSON :: Maybe String -> Maybe String -> Maybe String
getLangAsJSON pCode pDesc = do
  code <- pCode
  desc <- pDesc
  return $ (show . toJSON) $ Lang { code = code, desc = desc }
