module chinook.Handlers where

import Data.JSON

import chinook.Data (Lang)
import chinook.util.ContentType
--tag::basic-imports[]
import chinook.Chinook (Request, Response, response)
--end::basic-imports[]

-- tag::helloWorldHandler[]
helloWorldHandler :: IO Request -> IO Response
helloWorldHandler req = do
   return $ response.{ output = Just "Hello World from Chinook :-)" }
-- end::helloWorldHandler[]

goodbyeHandler :: IO Request -> IO Response
goodbyeHandler req = do
  return $ response.{ output = Just "Bye bye" }

-- tag::greetingsHandler[]
greetingsHandler :: IO Request -> IO Response
greetingsHandler req = do
  name      <- req.path ":name"
  age       <- req.path ":age"
  return $ response.{ status = 200, -- <1>
                      output = createGreetings name age }
-- end::greetingsHandler[]

createGreetings :: Maybe String -> Maybe String -> Maybe String
createGreetings name age = fmap (concat) $ sequence [greeting, name, question, age, mark]
    where greeting = Just "Hello "
          question = Just ". Are you "
          mark     = Just "?"

-- tag::getJSON[]
getJSONHandler :: IO Request -> IO Response
getJSONHandler req = do
  code  <- req.param "code"
  desc  <- req.param "desc"
  return $ response.{ status  = 200,
                      output  = getLangAsJSON code desc,
                      headers = [("Content-Type", Just "application/json")] } -- <1>
-- end::getJSON[]

getLangAsJSON :: Maybe String -> Maybe String -> Maybe String
getLangAsJSON pCode pDesc = do
  code <- pCode
  desc <- pDesc
  return $ (show . toJSON) $ Lang { code = code, desc = desc }

-- tag::getFormHandler[]
getFormHandler :: IO Request -> IO Response
getFormHandler req = do
  return $ response.{ status  = 200,
                      output  = Just ("<html><head><title>HTML Input</title></head>"
                                   ++ "<body><form action='posthtml' method='POST'>"
                                   ++ "<input name='code'/>"
                                   ++ "<input name='desc'/>"
                                   ++ "<input type='submit'/>"
                                   ++ "</form></body></html>"),
                      headers = [("Content-Type", Just "text/html")]
                    }
-- end::getFormHandler[]

-- tag:getJsonSenderHandler :: IO Reques -> IO Response
getJsonSenderHandler req = do
  return $ response.{ status  = 200,
                      output  = Just ("<html><head><title>JSON Sender</title></head>"
                                   ++ "<body>\n"
                                   ++ "<p id='status' ></p>\n"
                                   ++ "<p id='result' ></p>\n"
                                   ++ "<input type='button' "
                                   ++ "onclick='"
                                   ++  "var xhttp = new XMLHttpRequest(); "
                                   ++  "xhttp.open(\"POST\", \"postjson\", false); "
                                   ++  "xhttp.send(\"{\\\"code\\\": \\\"key\\\", \\\"desc\\\" : \\\"value\\\"}\");"
                                   ++  "document.getElementById(\"status\").innerHTML = xhttp.status;"
                                   ++  "document.getElementById(\"result\").innerHTML = xhttp.responseText;"
                                   ++ "' "
                                   ++ "value='Send' />\n"
                                   ++ "</body></html>\n"),
                      headers = [("Content-Type", Just "text/html")]
                    }

-- tag::postJSONHandler[]
postJSONHandler :: IO Request -> IO Response
postJSONHandler req = do
    body  <- req.body
    return $ case (processJSON body) of
        Just Lang { code, desc } -> createdResponse
        Nothing                  -> badRequest

createdResponse :: Response
createdResponse = response.{ status  = 201 , -- <1>
                             output  = Just "Created",
                             headers = [ContentType.json] }

badRequest :: Response
badRequest = response.{ status = 400 , -- <2>
                        output  = Just "Bad request",
                        headers = [ContentType.json] }

-- end::postJSONHandler[]


-- tag::postFormHandler[]
postFormHandler :: IO Request -> IO Response
postFormHandler req = do
    code  <- req.param "code"
    desc  <- req.param "desc"
    return $ case (code, desc) of
        (Just code, Just desc) -> langCreatedResponse code desc
        _                      -> badRequest


langCreatedResponse :: String -> String -> Response
langCreatedResponse code desc = response.{ status  = 201 , -- <1>
                                 output  = Just ((show . toJSON) $ Lang { code, desc }),
                                 headers = [ContentType.json] }
-- end::postFormHandler[]

-- tag::processJSON[]
processJSON :: Maybe String -> Maybe Lang
processJSON body = do
  text  <- body
  json  <- parseJSON text
  case json of
    Lang { code, desc }  -> Just json
    _                    -> Nothing
-- end::processJSON[]

-- tag::deleteHandler[]
deleteHandler :: IO Request -> IO Response
deleteHandler req = do
  id <- req.path ":id"
  return $ response.{ status = 204 }
-- end::deleteHandler[]

-- tag::putHandler[]
putHandler :: IO Request -> IO Response
putHandler req = do
  id <- req.path ":id"
  return $ response.{ status = 202 }
-- end::putHandler[]
