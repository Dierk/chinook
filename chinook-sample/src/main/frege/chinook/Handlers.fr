module chinook.Handlers where

import Data.JSON

import chinook.Data (Lang)
import chinook.util.ContentType
import chinook.Chinook (Request, Response, response)

-- tag::helloWorldHandler[]
helloWorldHandler :: IO Request -> IO Response
helloWorldHandler req = do
   return $ response.{ output = Just "Hello World from Chinook :-)" }
-- end::helloWorldHandler[]

goodbyeHandler :: IO Request -> IO Response
goodbyeHandler req = do
  return $ response.{ output = Just "Bye bye" }

-- tag::greetingsHandler[]
greetingsHandler :: IO Request -> IO Response
greetingsHandler req = do
  name      <- req.path ":name"
  age       <- req.path ":age"
  return $ response.{ status = 200,
                      output = createGreetings name age } -- <1> response status code
-- end::greetingsHandler[]

createGreetings :: Maybe String -> Maybe String -> Maybe String
createGreetings name age = fmap (concat) $ sequence [greeting, name, question, age, mark]
    where greeting = Just "Hello "
          question = Just ". Are you "
          mark     = Just "?"

-- tag::getJSON[]
getJSON :: IO Request -> IO Response
getJSON req = do
  code  <- req.param "code"
  desc  <- req.param "desc"
  return $ response.{ status  = 200,
                      output  = (getLangAsJSON code desc),
                      headers = [ContentType.json] } -- <1> response content type
-- end::getJSON[]

getLangAsJSON :: Maybe String -> Maybe String -> Maybe String
getLangAsJSON pCode pDesc = do
  code <- pCode
  desc <- pDesc
  return $ (show . toJSON) $ Lang { code = code, desc = desc }
