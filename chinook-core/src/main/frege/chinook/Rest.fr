--- This module holds all HTTP method calls
module chinook.Rest where

--- Request
data Request  = pure native spark.Request where
    pure native params :: Request -> String -> Maybe String

-- Gets a param value by name
params :: Request -> String -> Maybe String
params = Request.params

--- Response
data Response = pure native spark.Response

--- Route represents the body of the response
data Route    = pure native spark.Route where
    pure native new chinook.into.Rest.createRoute :: (Request -> Response -> String) -> Route

--- Rest wraps all sparkjava.com calls and exposes to Frege
data Rest = pure native spark.Spark where
    native doGet spark.Spark.get :: String -> Route -> IO ()

--- Creates a GET endpoint
get :: String -> (Request -> Response -> String) -> IO ()
get path lambda = Rest.doGet path $ Route.new lambda

bootstrap :: IO ()
bootstrap = get "/hi/:name" $ \req \res ->
    let message = fmap (\name -> "Hello " ++ name) $ params req ":name" in
    maybe "nothing" id $ message
